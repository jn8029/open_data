testDualQueueStack.cpp:22: passed: stack.size()==0 for: 0 == 0
testDualQueueStack.cpp:23: passed: stack.pop()
testDualQueueStack.cpp:32: passed: stack.size() == 10 for: 10 == 10
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 9 == 9
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 8 == 8
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 7 == 7
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 6 == 6
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 5 == 5
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 4 == 4
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 3 == 3
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 2 == 2
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 1 == 1
testDualQueueStack.cpp:37: passed: stack.pop()==counter for: 0 == 0
testDualQueueStack.cpp:40: passed: stack.size() == 0 for: 0 == 0
testDualQueueStack.cpp:41: passed: stack.pop()
testDualQueueStack.cpp:51: passed: stack.pop()==1 for: 1 == 1
testDualQueueStack.cpp:52: passed: stack.pop()==1 for: 1 == 1
testDualQueueStack.cpp:53: passed: stack.pop()==1 for: 1 == 1
testDualQueueStack.cpp:56: passed: stack.pop()==100 for: 100 == 100
testDualQueueStack.cpp:57: passed: stack.pop()==100 for: 100 == 100
testDualQueueStack.cpp:58: passed: stack.pop()==1 for: 1 == 1
testDualQueueStack.cpp:59: passed: stack.pop()
Passed all 3 test cases with 22 assertions.